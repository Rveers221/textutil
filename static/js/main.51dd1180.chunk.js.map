{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","role","placeholder","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","console","log","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","fade","show","word","lower","charAt","slice","capitalize","msg","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","aboutText","body","setInterval","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.51dd1180.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg bg-${props.mode} `} >\r\n            <div className=\"container-fluid \">\r\n                {/* <a className=\"navbar-brand \"  href=\"/\">{props.title} </a> */}\r\n                <a className={`navbar-brand text-${props.mode === 'light' ? 'dark' : 'light'}`}   href=\"#\">{props.title} </a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            {/* <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a> */}\r\n                            {/* <Link className={`nav-link active text-${props.mode === 'light' ? 'dark' : 'light'}`} aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                            <a className={`nav-link active text-${props.mode === 'light' ? 'dark' : 'light'}`} aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\"> */}\r\n                            {/* <a className=\"nav-link\" href=\"/\">{props.aboutText}</a> */}\r\n                            {/* <Link className={`nav-link text-${props.mode === 'light' ? 'dark' : 'light'}`} to=\"/about\">{props.aboutText}</Link> */}\r\n                        {/* </li> */}\r\n\r\n                    </ul>\r\n                    <form className=\"d-flex\" role=\"search\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                    </form>\r\n\r\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                        <input className=\"form-check-input mx-5\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enabled Dark Mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string\r\n}\r\n\r\n// Navbar.defaultProps = {\r\n//     title : 'set title here',\r\n//     aboutText: 'About Text here'\r\n// };","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        console.log(\"upper case was clicked\"+text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to upperCase\",\"success\");\r\n    }\r\n    const handleLoClick = ()=>{\r\n        console.log(\"lower case was clicked\"+text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lower Case\",\"success\");\r\n    }\r\n    const handleCopy = ()=>{\r\n        console.log(\"i am copy\");\r\n        let text = document.getElementById('myBox');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Coppied Successfully\",\"success\");\r\n    }\r\n// This function will track more then one spaces then copy them into newText then repalce those space with single space\r\n    const handleExtraSpaces = ()=>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"All extra spaces removed successfuly\",\"success\");\r\n    }\r\n    const handleClearClick = ()=>{\r\n        console.log(\"lower case was clicked\"+text);\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text cleared successfully\",\"success\");\r\n    }\r\n    const handleOnChange = (event)=>{\r\n        console.log(\"on change\");\r\n        setText(event.target.value);\r\n    }\r\n    const [text, setText] = useState('Enter text here2');\r\n    // text = \"new Text\"; // Wrong way to change the state\r\n    // settext(\"new Text\"); // correct way to change the state\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color:props.mode === 'dark' ? 'white' : 'black'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode === 'light' ? 'white' : '#a8b7c7',color:props.mode === 'dark' ? 'white' : 'black'}} id=\"myBox\" rows=\"10\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to upperCase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to LowerCase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear the text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>Remove Extra Space</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color:props.mode === 'dark' ? 'white' : 'black'}}>\r\n            <h1>Your text summary</h1>\r\n            <p>{text == \"\" ?0:text.split(\" \").length} words and {text.length} characters</p>\r\n            <p>{0.008 * text.split(\" \").length} minutes need to read</p>\r\n            <h2>Preview</h2>\r\n             <p>{text.length>0?text:\"Enter something in text box above to preview it here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className=\"alert alert-success alert-dismissible\" fade show role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import About from './components/About';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');// whether dark mode enabled or not\n  const [alert, setAlert] = useState(null)\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#214e78';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      setInterval(() => {\n        document.title = 'TextUtils-Dark Mode';\n      }, 2000);\n      setInterval(() => {\n        document.title = 'Install TextUtils Now';\n      }, 1500);\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = 'TextUtils-Light Mode';\n    }\n\n  }\n  return (\n    <>\n     {/* <Router> */}\n      <Navbar title=\"Textutils\" aboutText=\"About us\" mode={mode} toggleMode={toggleMode} />\n      {/* <Navbar /> */}\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n      {/* <Switch> */}\n        {/* /user---> component 1\n        /user/Home--->component 2 */}\n          {/* <Route exact path=\"/about\">\n            <About />\n          </Route> */}\n          {/* <Route exact path=\"/\"> */}\n          <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode} />\n           {/* </Route> */}\n      {/* </Switch> */}\n       \n        {/* <About/> */}\n      </div>\n      {/* </Router> */}\n    </>\n\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'), \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}